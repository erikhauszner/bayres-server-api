/**
 * Script de mantenimiento autom√°tico para el sistema de auditor√≠a
 * 
 * Este script debe ejecutarse peri√≥dicamente (ej: diariamente) para:
 * - Aplicar pol√≠ticas de retenci√≥n
 * - Archivar registros antiguos
 * - Optimizar √≠ndices
 * - Generar reportes de salud del sistema
 */

import mongoose from 'mongoose';
import auditService from '../services/auditService';

// Configuraci√≥n por defecto
const DEFAULT_CONFIG = {
  retentionDays: 365,      // Mantener registros por 1 a√±o
  archiveDays: 90,         // Archivar registros despu√©s de 3 meses
  optimizeIndexes: true,   // Optimizar √≠ndices
  generateReport: true     // Generar reporte de salud
};

/**
 * Conecta a la base de datos
 */
async function connectToDatabase(): Promise<void> {
  try {
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/bayres-panel';
    await mongoose.connect(mongoUri);
    console.log('‚úÖ Conectado a MongoDB');
  } catch (error) {
    console.error('‚ùå Error conectando a MongoDB:', error);
    throw error;
  }
}

/**
 * Ejecuta mantenimiento de auditor√≠a
 */
async function runAuditMaintenance(config = DEFAULT_CONFIG): Promise<void> {
  console.log('üîß Iniciando mantenimiento de auditor√≠a...');
  console.log('üìã Configuraci√≥n:', config);
  
  try {
    // 1. Obtener estad√≠sticas antes del mantenimiento
    if (config.generateReport) {
      console.log('\nüìä Obteniendo estad√≠sticas de almacenamiento...');
      const statsBefore = await auditService.getStorageStats();
      console.log('üìà Estad√≠sticas antes del mantenimiento:', {
        totalLogs: statsBefore.totalLogs,
        estimatedSizeMB: statsBefore.estimatedSizeMB,
        logsOlderThan365Days: statsBefore.logsOlderThan365Days
      });
    }

    // 2. Archivar registros antiguos
    console.log('\nüì¶ Archivando registros antiguos...');
    const archiveResult = await auditService.archiveOldLogs(config.archiveDays);
    console.log(`‚úÖ ${archiveResult.archivedCount} registros archivados`);

    // 3. Aplicar pol√≠tica de retenci√≥n
    console.log('\nüóëÔ∏è Aplicando pol√≠tica de retenci√≥n...');
    const retentionResult = await auditService.applyRetentionPolicy(config.retentionDays);
    console.log(`‚úÖ ${retentionResult.deletedCount} registros eliminados`);

    // 4. Optimizar √≠ndices
    if (config.optimizeIndexes) {
      console.log('\n‚ö° Optimizando √≠ndices...');
      await auditService.optimizeIndexes();
      console.log('‚úÖ √çndices optimizados');
    }

    // 5. Obtener estad√≠sticas despu√©s del mantenimiento
    if (config.generateReport) {
      console.log('\nüìä Obteniendo estad√≠sticas finales...');
      const statsAfter = await auditService.getStorageStats();
      console.log('üìà Estad√≠sticas despu√©s del mantenimiento:', {
        totalLogs: statsAfter.totalLogs,
        estimatedSizeMB: statsAfter.estimatedSizeMB,
        logsOlderThan365Days: statsAfter.logsOlderThan365Days
      });

      // Calcular reducci√≥n
      const totalReduction = archiveResult.archivedCount + retentionResult.deletedCount;
      console.log(`\nüíæ Resumen del mantenimiento:`);
      console.log(`   - Registros procesados: ${totalReduction}`);
      console.log(`   - Archivados: ${archiveResult.archivedCount}`);
      console.log(`   - Eliminados: ${retentionResult.deletedCount}`);
    }

    console.log('\n‚úÖ Mantenimiento de auditor√≠a completado exitosamente');

  } catch (error) {
    console.error('‚ùå Error durante el mantenimiento:', error);
    throw error;
  }
}

/**
 * Funci√≥n principal
 */
async function main(): Promise<void> {
  try {
    await connectToDatabase();
    
    // Leer configuraci√≥n desde variables de entorno o usar valores por defecto
    const config = {
      retentionDays: parseInt(process.env.AUDIT_RETENTION_DAYS || '365'),
      archiveDays: parseInt(process.env.AUDIT_ARCHIVE_DAYS || '90'),
      optimizeIndexes: process.env.AUDIT_OPTIMIZE_INDEXES !== 'false',
      generateReport: process.env.AUDIT_GENERATE_REPORT !== 'false'
    };

    await runAuditMaintenance(config);
    
  } catch (error) {
    console.error('‚ùå Error en el script de mantenimiento:', error);
    process.exit(1);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Desconectado de MongoDB');
    process.exit(0);
  }
}

// Funci√≥n para verificar la salud del sistema de auditor√≠a
async function checkAuditHealth(): Promise<void> {
  try {
    await connectToDatabase();
    
    console.log('ü©∫ Verificando salud del sistema de auditor√≠a...');
    
    const stats = await auditService.getStorageStats();
    const recentActivities = await auditService.getRecentActivities(5);
    
    console.log('\nüìä Estado del sistema:');
    console.log(`   - Total de logs: ${stats.totalLogs.toLocaleString()}`);
    console.log(`   - Tama√±o estimado: ${stats.estimatedSizeMB} MB`);
    console.log(`   - Logs √∫ltimos 30 d√≠as: ${stats.logsLast30Days.toLocaleString()}`);
    console.log(`   - Logs m√°s antiguos a 1 a√±o: ${stats.logsOlderThan365Days.toLocaleString()}`);
    
    // Verificar si hay actividad reciente
    if (recentActivities.length === 0) {
      console.warn('‚ö†Ô∏è No se encontraron actividades recientes');
    } else {
      console.log(`‚úÖ Sistema activo - √∫ltima actividad: ${recentActivities[0].timestamp}`);
    }
    
    // Recomendaciones
    console.log('\nüí° Recomendaciones:');
    if (stats.logsOlderThan365Days > 10000) {
      console.log('   - Considerar ejecutar pol√≠tica de retenci√≥n');
    }
    if (stats.estimatedSizeMB > 100) {
      console.log('   - Considerar archivar registros antiguos');
    }
    if (stats.totalLogs > 100000) {
      console.log('   - Considerar optimizar √≠ndices');
    }
    
  } catch (error) {
    console.error('‚ùå Error verificando salud del sistema:', error);
    throw error;
  } finally {
    await mongoose.disconnect();
  }
}

// Ejecutar seg√∫n el argumento proporcionado
const command = process.argv[2];

if (command === 'health') {
  checkAuditHealth();
} else {
  main();
}

export { runAuditMaintenance, checkAuditHealth }; 